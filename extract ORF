#!/usr/bin/env python3

import sys
import os.path
from os import path
from Bio import SeqIO
from Bio.Seq import Seq

def checkMfannotFile():
    if len(sys.argv) != 2:
        print("\nUsage:\npython uorf_extractor.py [file_path_name]\n")
        sys.exit(0)

    mfannot_file_name = sys.argv[1]

    if not path.exists(mfannot_file_name):
        print("\nFile not found! Check the path and file name.\n")
        exit(0)

    input_file = open(mfannot_file_name, 'r')

    if input_file.readline().find("mfannot") == -1:
        print("\nThe file is empty or is not a mfannot output file\n")
        input_file.close()
        exit(0)

    if os.name == "nt":
        mfannot_file_name = mfannot_file_name.strip(".\\")
    output_file_name = mfannot_file_name[0:mfannot_file_name.find(".new")]

    output_file = open(output_file_name + "_ORFs.fasta", 'w')
    return input_file, output_file

def findOrfs(str_name, uORfs_name_vector):
    if "orf" in str_name:
        uORfs_name_vector.append(str_name)

def getuORFSNamesMfannot(uORfs_name_vector, input_file):
    find_str_gene = 0
    for line in input_file:
        if "List of genes added" in line:
            find_str_gene = 1
        if find_str_gene == 1:
            if "end mfannot" in line:
                find_str_gene = 0
            else:
                findOrfs(line[8:29].strip(), uORfs_name_vector)
                findOrfs(line[29:50].strip(), uORfs_name_vector)
                findOrfs(line[50:70].strip(), uORfs_name_vector)

def getuORFsStartEndSeq(uORfs_name_vector, input_file, output_file):
    for uORfs_name in uORfs_name_vector:
        input_file.seek(0)
        bool_start_seq = 0
        orf_seq = ""
        for line in input_file:
            if "-" + uORfs_name in line and "==> start" in line:
                detailed_orf_name = line[1:line.find("==> start")].strip()
                bool_start_seq = 1
            elif bool_start_seq == 1:
                num_index = line.find("  ", 2)
                if orf_seq == "":
                    orf_start_position = line[:num_index].strip()
                if "-" + uORfs_name in line and "==> end" in line:
                    output_file.write(">" + output_file.name[:-11] + "_" + detailed_orf_name + "\n")
                    output_file.write(orf_seq + "\n\n")
                    orf_seq = ""
                    bool_start_seq = 0
                elif ";" not in line:
                    orf_seq += line[num_index:].strip()

def getuORFsStartEndSeq2(uORfs_name_vector, input_file, output_file):
    for uORfs_name in uORfs_name_vector:
        input_file.seek(0)
        bool_start_seq = 0
        orf_seq = ""
        for line in input_file:
            if "-" + uORfs_name in line and "<== end" in line:
                detailed_orf_name = line[1:line.find("<== end")].strip()
                bool_start_seq = 1
            elif bool_start_seq == 1:
                num_index = line.find("  ", 2)
                if orf_seq == "":
                    orf_start_position = line[:num_index].strip()
                if "-" + uORfs_name in line and "<== start" in line:
                    orf_seq2 = Seq(orf_seq)
                    orf_seq3 = orf_seq2.reverse_complement()
                    output_file.write(">" + output_file.name[:-11] + "_" + detailed_orf_name + "\n")
                    output_file.write(str(orf_seq3) + "\n\n")
                    orf_seq = ""
                    bool_start_seq = 0
                elif ";" not in line:
                    orf_seq += line[num_index:].strip()

def main():
    input_file, output_file = checkMfannotFile()
    uORfs_name_vector = []
    getuORFSNamesMfannot(uORfs_name_vector, input_file)
    getuORFsStartEndSeq(uORfs_name_vector, input_file, output_file)
    getuORFsStartEndSeq2(uORfs_name_vector, input_file, output_file)
    print("\nResults saved in:", output_file.name)
    output_file.close()
    input_file.close()

if __name__ == '__main__':
    main()

#!/bin/bash

# Usage: ./run_uorf_extractor.sh path/to/mfannot_output.new

INPUT_FILE="$1"

if [[ -z "$INPUT_FILE" ]]; then
  echo "Usage: $0 <mfannot_output_file>"
  exit 1
fi

python3 uorf_extractor.py "$INPUT_FILE"

FROM python:3.11-slim

WORKDIR /app

COPY requirements.txt .
RUN pip install --no-cache-dir -r requirements.txt

COPY uorf_extractor.py .
COPY run_uorf_extractor.sh .
RUN chmod +x run_uorf_extractor.sh

ENTRYPOINT ["./run_uorf_extractor.sh"]

